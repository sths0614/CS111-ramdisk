Lab 2 Ramdisk/device driver

in-memory block device, blkdev.h, can be called read/write on 
file stored in /dev/
Linux 2.6.18 (cs111.iso)
runqmu will attach modules to kernel, using insmod == install module

Goals:
1. Support read/write from/to Ramdisk
2. Implement locking, handling synchronization in kernel code

1. Support read/write from/to Ramdisk
blkdev.h will be different for different versions of linux
http://lxr.linux.no/$linux+v2.6.18
in blkdev.h, look at struct request
struct request{
}

Use: memcpy
Not: copy_from_user, copy_to_user

//is it a write request or read request?
//if write, then copy data from user buffer to device buffer
//if read, then opposite


//trick: compute offset to the buffer, where to start copying from 
uint8_t* ptr = d->data+(req->sector)*SECOTR_SIZE; //req->sector == starting sector#
unsined int requestType = rq_data_dar(req);
if(requestType == READ){
	memcpy(req->buffer, ptr, req->current_nr_sectors*SECTOR_SIZE);
			//dest		//src 		//current_nr_sectors is how many 

}
else if(requestType == WRITE){
	memcpy(ptr, req->buffer, req->current_nr_sectors*SECTOR_SIZE);
}














2. Implement locking
- OSPRDIOCACQUIRE //blocking implementation
- OSPRDIOCRELEASE //release the lock
- OSPRDIOCTRYACQUIRE //polling 

readlock
- trivial because anyone can get the readlock even if it is already acquired
writelock
- put processes in queue in queue order if one processes already has the lock

Solve: 
1. Assign a unique ticket # to each process
	GLOBAL:
	ticket_head = 0;
	ticket_tail = 0;

	HAVE TO BE EXECUTED ATOMICALLY:
	my_ticket = ticket_head;
	ticket_head++;

2. Assign the process with conditions such as my_ticket == ticket_tail and ___ to have the lock
	Ex:
	P0->my_ticket == 0
	P1->my_ticket == 1
	P3->my_ticket == 2 

	In Useful Kernel Functions, 5.waitqueues
	int wait_event_interruptable(wait_queue_head_t q, condition){
		//blocks the current task on a waitqueue until a "condition" becomes true
		//obtain the lock
	}
	1st condition: my_ticket == ticket_tail
	2nd condition: if the ticket_tail is not in exited_ticket 

	when a process is done: 
	p0 increments ticket_tail by 1 because it assumes that P1 is still alive
	but P1 is killed when P0 was working, it will cause a problem
	therefore, when a process is killed, put its own ticket number in the exited_ticket list

	//if p1 is killed and be woken up, it will 
	if(wait_event_interruptable == -ERESTARTSYS){
		exited_ticket += my_ticket;
	}

	wake_up_all(q);
	//when all processes in the q are woken up, it will try to procede with wait_event_interruptable, and only the ones with condition == true can execute the code after that

filp->f_flags|=F_OSPRD_LOCKED
addToList(&(d->writeLockPids), current->pid); //pid needs to go in the writeLockPids list

use kmalloc!!! instead of malloc!!!

ioctl(devicefile, command);


Extra credit:
1. construct dependency graph among processes waiting on a RAMDISK
2. If there exists a cycle, then there's a deadlock

Office Hour:

if(cmd == OSPRDIOCACQUIRE){
	if(filp_writable){
		osp_spin_lock(&(d->mutex));
		myTicket = d->ticket_head;
		d->ticket_head++;
	}
	if(current)
	.
	.
	osp_spin_unlock(&(d->mutex));
}


if (wait_event_interruptable(d->blockq, myTicket == d->ticket_tail && readListPid is empty && writeListPid is empty)){
	//if the condition is true, wait_event_interruptable will return 0, will not execute stuff inside if 
	//if the process receives a kill signal, the return statement is -ERESTARTSYS, which is not 0, so if statement will be executed

	if(myTicket == d->ticket_tail){
		//if this process is killed after ticket_tail is incremented just before wake_up_all, there will be a race condition
		increment ticketTail to next alive process in order
	}
	else{
		//add its ticket to the exitedTicket list array
		addToExitTicketlist(myTicket);
	}
	return -ERESTARTSYS;
}
osp_spin_lock(&(d->mutex));
filpsf_flags |= F_OSPRD_LOCKED;
increment tickettail to next alive process in order
add current pid to writelistpid 
osp_spin_unlock(&(d->mutex));

similar to reading, except there is only one condition
OS_PID_INFO, maintain writeListPId and readListPid, and tickethead and tickettail

TRYACQUIRE, Polling:
if (myTicket != ticket_tail && writepid is empty){
	return -EBUSY to user code
}